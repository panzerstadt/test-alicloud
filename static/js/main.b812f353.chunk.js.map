{"version":3,"sources":["assets/SampleVideo_1280x720_10mb.mp4","logo.svg","component/VideoGallery/AllCheck.js","component/VideoGallery/StressTestEmbed.js","component/VideoGallery/StressTestLocal.js","component/VideoGallery/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","YoutubeEmbed","react_default","a","createElement","Fragment","width","height","src","frameborder","allow","allowfullscreen","YoukuEmbed","Mp4Local","controls","autoPlay","playsInline","loop","muted","vidsrc","type","Test","className","styles","videoContainer","AllCheck_YoutubeEmbed","AllCheck_YoukuEmbed","AllCheck_Mp4Local","StressLocal","_useState","useState","_useState2","Object","slicedToArray","count","setCount","placeholder","value","onChange","e","target","_ref","out","toConsumableArray","Array","parseInt","console","log","map","v","i","StressTestLocal_Mp4Local","key","StressEmbed","StressTestEmbed_YoukuEmbed","_ref$type","AllCheck","App","setType","logo","alt","VideoGallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b812f353.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SampleVideo_1280x720_10mb.798ce268.mp4\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nimport styles from \"./index.module.css\";\n\nimport vidsrc from \"../../assets/SampleVideo_1280x720_10mb.mp4\";\n\nconst YoutubeEmbed = () => {\n  return (\n    <>\n      <h1>Youtube Embed</h1>\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src=\"https://www.youtube.com/embed/VwVg9jCtqaU\"\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n      />\n    </>\n  );\n};\n\nconst YoukuEmbed = () => {\n  return (\n    <>\n      <h1>Youku Embed</h1>\n      <iframe\n        height=\"498\"\n        width=\"510\"\n        src=\"http://player.youku.com/embed/XMzI1NzA2MzE2MA==\"\n        frameborder=\"0\"\n        allowfullscreen\n      />\n    </>\n  );\n};\n\nconst Mp4Local = () => {\n  return (\n    <>\n      <h1>Local file</h1>\n      <video height={400} controls autoPlay playsInline loop muted>\n        <source src={vidsrc} type=\"video/webm\" />\n      </video>\n    </>\n  );\n};\n\nconst Test = () => {\n  return (\n    <div className={styles.videoContainer}>\n      <YoutubeEmbed />\n      <br />\n      <YoukuEmbed />\n      <br />\n      <Mp4Local />\n    </div>\n  );\n};\n\nexport default Test;\n","import React, { useState } from \"react\";\n\nconst YoukuEmbed = () => {\n  return (\n    <iframe\n      height=\"498\"\n      width=\"510\"\n      src=\"http://player.youku.com/embed/XMzI1NzA2MzE2MA==\"\n      frameborder=\"0\"\n      allowfullscreen\n    />\n  );\n};\n\nconst StressTestEmbed = () => {\n  const [count, setCount] = useState(10);\n\n  const Vids = ({ count }) => {\n    const out = [...Array(parseInt(count))];\n\n    return out.map((v, i) => {\n      return <YoukuEmbed key={i} />;\n    });\n  };\n\n  return (\n    <div>\n      <input\n        placeholder=\"how many videos at once\"\n        value={count}\n        onChange={e => e.target.value > 0 && setCount(e.target.value)}\n      />\n      <br />\n      <Vids count={count} />\n    </div>\n  );\n};\n\nexport default StressTestEmbed;\n","import React, { useState } from \"react\";\n\nimport vidsrc from \"../../assets/SampleVideo_1280x720_10mb.mp4\";\n\nconst Mp4Local = () => {\n  return (\n    <video height={200} controls playsInline>\n      <source src={vidsrc} type=\"video/webm\" />\n    </video>\n  );\n};\n\nconst StressTestEmbed = () => {\n  const [count, setCount] = useState(10);\n\n  const Vids = ({ count }) => {\n    const out = [...Array(parseInt(count))];\n    console.log(out);\n    return out.map((v, i) => {\n      return <Mp4Local key={i} />;\n    });\n  };\n\n  return (\n    <div>\n      <input\n        placeholder=\"how many videos at once\"\n        value={count}\n        onChange={e => e.target.value > 0 && setCount(e.target.value)}\n      />\n      <br />\n      <Vids count={count} />\n    </div>\n  );\n};\n\nexport default StressTestEmbed;\n","import React from \"react\";\n\nimport All from \"./AllCheck\";\nimport EmbedStressTest from \"./StressTestEmbed\";\nimport LocalStressTest from \"./StressTestLocal\";\n\nexport const StressLocal = LocalStressTest;\nexport const StressEmbed = EmbedStressTest;\n\nconst Test = ({ type = \"gallery\" }) => {\n  switch (type) {\n    case \"local\":\n      return <StressLocal />;\n    case \"embed\":\n      return <StressEmbed />;\n    default:\n      return <All />;\n  }\n};\n\nexport default Test;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Test from \"./component/VideoGallery\";\n\nfunction App() {\n  const [type, setType] = useState(\"gallery\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>v1</p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>select test type</h1>\n        <select onChange={e => setType(e.target.value)}>\n          <option value=\"all\">Basic Test</option>\n          <option value=\"local\">Local files stress test</option>\n          <option value=\"embed\">Embed files stress test</option>\n        </select>\n        <Test type={type} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}